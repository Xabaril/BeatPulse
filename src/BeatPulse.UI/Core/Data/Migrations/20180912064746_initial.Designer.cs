// <auto-generated />
using System;
using BeatPulse.UI.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BeatPulse.UI.Core.Data.Migrations
{
    [DbContext(typeof(LivenessDb))]
    [Migration("20180912064746_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932");

            modelBuilder.Entity("BeatPulse.UI.Core.Data.LivenessConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DiscoveryService")
                        .HasMaxLength(100);

                    b.Property<string>("LivenessName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("LivenessUri")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("LivenessConfigurations");
                });

            modelBuilder.Entity("BeatPulse.UI.Core.Data.LivenessExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DiscoveryService")
                        .HasMaxLength(50);

                    b.Property<bool>("IsHealthy");

                    b.Property<DateTime>("LastExecuted");

                    b.Property<string>("LivenessName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("LivenessResult")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("LivenessUri")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("OnStateFrom");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("LivenessExecutions");
                });

            modelBuilder.Entity("BeatPulse.UI.Core.Data.LivenessExecutionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LivenessExecutionId");

                    b.Property<DateTime>("On");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("LivenessExecutionId");

                    b.ToTable("LivenessExecutionHistory");
                });

            modelBuilder.Entity("BeatPulse.UI.Core.Data.LivenessFailureNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastNotified");

                    b.Property<string>("LivenessName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsUpAndRunning")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("LivenessFailuresNotifications");
                });

            modelBuilder.Entity("BeatPulse.UI.Core.Data.LivenessExecutionHistory", b =>
                {
                    b.HasOne("BeatPulse.UI.Core.Data.LivenessExecution")
                        .WithMany("History")
                        .HasForeignKey("LivenessExecutionId");
                });
#pragma warning restore 612, 618
        }
    }
}
